/** 
* NO TOCAR ESTE ARCHIVO: Es generado automaticamente, si sabes lo que haces adelante ;)
* de lo contrario mejor ir a la documentacion o al servidor de discord link.codigoencasa.com/DISCORD
*/
'use strict';

var require$$0 = require('path');
var require$$1 = require('fs');
var require$$2 = require('kleur');
var require$$3 = require('polka');
var require$$4 = require('serve-static');
const { cwd } = require('process');
const send = require('send');
const bodyParser = require('body-parser');
const multer = require('multer')

const { join } = require$$0;
const { createReadStream, existsSync, readFile, readFileSync } = require$$1;
const { bgYellow, cyan, yellow } = require$$2;
const polka = require$$3;

const HTTP_PORT = process.env.PORT || 3000;
const QR_FILE = process.env.QR_FILE ?? 'bot';
const PUBLIC_URL = process.env.PUBLIC_URL ?? process.env.RAILWAY_STATIC_URL ?? 'http://localhost';

const dir = [join(__dirname, 'dist'), join(__dirname, '..', 'dist')].find((i) => existsSync(i));
const serve = require$$4(dir);

/**
 * Iniciamos Portal WEB para escanear QR
 * @param {port:3000, publicSite:'http://mistio.com', qrFile:'qr.png', dir:__dirname}
 */
const start = (args) => {
    const injectArgs = {
        port: HTTP_PORT,
        publicSite: PUBLIC_URL,
        name: QR_FILE,
        ...args,
    };
    const { port, publicSite, name } = injectArgs;

    const banner = () => {
        console.log(``);
        console.log(bgYellow(`游뛀 ESCANEAR QR 游뛀`));
        console.log(cyan(`- Para escanear el qr de conexion visita `), yellow(`${publicSite}:${port}`));
        console.log(cyan(`- Se ha creado un archivo que finaliza `), yellow('qr.png'));
        console.log(``);
    };

    polka()
        .use(serve)
        .use(bodyParser.urlencoded({ extended: true }))
        .get('/resources/*', (req, res) => {
            const fileName = req.url.replace('/resources/', '');
            const filePath = join(process.cwd(), 'resources', fileName);
            send(req, filePath).pipe(res);
        })
        .get('qr.png', (_, res) => {
            const qrSource = [
                join(process.cwd(), `${name}.qr.png`),
                join(__dirname, '..', `${name}.qr.png`),
                join(__dirname, `${name}.qr.png`),
            ].find((i) => existsSync(i));

            const qrMark = [
                join(__dirname, 'dist', 'water-mark.png'),
                join(__dirname, '..', 'dist', 'water-mark.png'),
            ].find((i) => existsSync(i));
            const fileStream = createReadStream(qrSource ?? qrMark);

            res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
        })
        .get('/promociones/alisado', (_, res) => {
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/promociones/promoAlisado.html');
            fileStream.pipe(res);
        })
        .get('/promociones/mechas', (_, res) => {
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/promociones/promoMechas.html');
            fileStream.pipe(res);
        })
        .get('/promociones/manicure', (_, res) => {
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/promociones/promoManicure.html');
            fileStream.pipe(res);
        })
        //--------------------------SERVICIOS-------------------------------
        .get('/servicios/alisado', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioAlisado.html');
            fileStream.pipe(res);
        })
        .get('/servicios/mechas', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioMechas.html');
            fileStream.pipe(res);
        })
        .get('/servicios/manicure', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioManicure.html');
            fileStream.pipe(res);
        })
        .get('/servicios/maquillaje', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioMaquillaje.html');
            fileStream.pipe(res);
        })
        .get('/servicios/cejaspes', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioCejasPestanas.html');
            fileStream.pipe(res);
        })
        .get('/servicios/pedicure', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioPedicure.html');
            fileStream.pipe(res);
        })
        .get('/servicios/depilaciones', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioDepilaciones.html');
            fileStream.pipe(res);
        })
        .get('/servicios/limpiezafacial', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioLimpiezafacial.html');
            fileStream.pipe(res);
        })
        .get('/servicios/tratamcapil', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioTratamientoCapilar.html');
            fileStream.pipe(res);
        })
        .get('/servicios/otros', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioOtros.html');
            fileStream.pipe(res);
        })
        .get('/editarMensaje', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/tools/editarMensaje.html');
            fileStream.pipe(res);
        })
        .get('/editarMensajeImg', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/tools/editarMensajeImg.html');
            fileStream.pipe(res);
        })
        .get('/nuevoMensajeTexto', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/tools/newMsgTxt.html');
            fileStream.pipe(res);
        })
        .get('/nuevoMensajeImagen', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/tools/newMsgImg.html');
            fileStream.pipe(res);
        })
        .post('/nuevoMensaje', (req, res) => {
            const msg = req.body.msg; // Obtenemos el valor del campo "msg" del formulario
            const tipoServicio = req.body.tipoServicio;
            const categoria = req.body.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }

            // Guardado de datos
            let data = readFileSync(datos)
            let obj = JSON.parse(data)
            obj[tipoServicio].push({ mensaje: msg })
            require$$1.writeFileSync(datos, JSON.stringify(obj))

            if(isServicio === true) {
                res.statusCode = 302;
                let urlServicio = '/servicios/' + tipoServicio
                res.setHeader('Location', urlServicio);
                res.end();
            } else {
                res.statusCode = 302;
                let urlServicio = '/promociones/' + tipoServicio
                res.setHeader('Location', urlServicio);
                res.end();
            }
        })
        .post('/editarMensaje', (req, res) => {
            const idMensaje = req.body.idMensaje;
            const tipoServicio = req.body.subCategoria;
            const categoria = req.body.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }


            //PROCEDIMIENTO PARA MODIFICAR UN DATO
            readFile(datos, (err, data) => {
                if (err) throw err;
                const obj = JSON.parse(data);
                
                obj[tipoServicio][idMensaje].mensaje = req.body.mensaje;

                require$$1.writeFile(datos, JSON.stringify(obj), err => {
                    if (err) throw err;

                    if(isServicio === true) {
                        res.statusCode = 302;
                        let urlServicio = '/servicios/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    } else {
                        res.statusCode = 302;
                        let urlServicio = '/promociones/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    }         
                })
            })
        })
        .post('/editarMensajeImg', (req, res) => {
            const idMensaje = req.query.idMensaje;
            const tipoServicio = req.query.tipoServicio
            const categoria = req.query.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }

            readFile(datos, (err, data) => {
                const obj = JSON.parse(data)
                let msg = obj[tipoServicio][idMensaje].mensaje
                let path = join(process.cwd(), msg)
                const nombreArchivo = require$$0.basename(msg);
                
                if(typeof path === 'string') {
                    if(path.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                        require$$1.unlink(path, (err) => {
                            if (err) {
                                console.error(err);
                                return;
                              }
                            console.log(`El archivo ${msg} ha sido eliminado correctamente.`);
                        })
                    }
                }

                let cat
                        if(isServicio === true){
                            cat = 'servicios'
                        } else {
                            cat = 'promociones'
                        }
                
                //FUNCION PARA VOLVER A SUBIR LA IMAGEN
                const storage = multer.diskStorage({
                    destination: function (req, file, cb) {
                        cb(null, `./resources/${cat}/imgs/` + tipoServicio);
                    },
                    //FUNCION QUE LE DA EL MISMO NOMBRE DEL ARCHIVO ANTERIOR AL NUEVO
                    filename: function (req, file, cb) {
                        cb(null, nombreArchivo);
                    }
                });

                const upload = multer({ storage: storage });

                upload.single('img')(req, res, function (err) {
                    if (err instanceof multer.MulterError) {
                        console.log(err)
                    } else if (err) {
                        console.log(err)
                    } else {
                        // La imagen se subi칩 correctamente
                        console.log(`Se resubi칩 la imagen ${req.file.filename} en la ruta: /resources/${cat}/imgs/${tipoServicio}`);
                        let msg2 = `/resources/${cat}/imgs/${tipoServicio}/${req.file.filename}`
                        console.log(`NUEVA RUTA: ${msg2}`)
                    }
                });
            
                if(isServicio === true) {
                    res.statusCode = 302;
                    let urlServicio = '/servicios/' + tipoServicio
                    res.setHeader('Location', urlServicio);
                    res.end();
                } else {
                    res.statusCode = 302;
                    let urlServicio = '/promociones/' + tipoServicio
                    res.setHeader('Location', urlServicio);
                    res.end();
                }   
            })          
        })
        .post('/eliminarMensaje', (req, res) => {
            const idMensaje = req.body.idMensaje;
            const tipoServicio = req.body.subCategoria;
            const categoria = req.body.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }

            readFile(datos, (err, data) => {
                if (err) throw err;

                const obj = JSON.parse(data)
                let msg = obj[tipoServicio][idMensaje].mensaje
                let path = join(process.cwd(), msg)
            
                //ELIMINACION DEL MENSAJE EN EL JSON, PERO SE QUEDA UN null EN EL CAMPO
                delete obj[tipoServicio][idMensaje];

                if(typeof path === 'string') {
                    if(path.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                        require$$1.unlink(path, (err) => {
                            if (err) {
                                console.error(err);
                                return;
                              }
                            console.log(`El archivo ${msg} ha sido eliminado correctamente.`);
                        })
                    }
                }

                //FUNCION QUE ELIMINA LOS NULL DEL ARCHIVO JSON
                const removeNullValues = (obj) => {
                    if (typeof obj !== 'object') {
                        return obj;
                    }

                    if (Array.isArray(obj)) {
                        return obj.filter((value) => value !== null).map(removeNullValues);
                    }

                    return Object.entries(obj)
                        .filter(([_, value]) => value !== null)
                        .reduce((acc, [key, value]) => {
                            acc[key] = removeNullValues(value);
                            return acc;
                        }, {});
                };

                const newData = removeNullValues(obj);

                require$$1.writeFile(datos, JSON.stringify(newData), err => {
                    if (err) throw err;
                    console.log(`El dato de ${tipoServicio} con id ${idMensaje} ha sido eliminado`)

                    if(isServicio === true) {
                        res.statusCode = 302;
                        let urlServicio = '/servicios/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    } else {
                        res.statusCode = 302;
                        let urlServicio = '/promociones/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    }   
                })
            })
        })
        .post('/eliminarMensajesTodo', (req, res) => {
            const tipoServicio = req.query.tipoServicio
            const categoria = req.query.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }

            readFile(datos, (err, data) => {
                if (err) throw err;

                const obj = JSON.parse(data)

                //ELIMINACION DEL MENSAJE EN EL JSON, PERO SE QUEDA UN null EN EL CAMPO
                for (let i = 0; i < obj[tipoServicio].length; i++) {

                    if (obj[tipoServicio][i].mensaje) {

                      if(typeof obj[tipoServicio][i].mensaje === 'string') {
                        if(obj[tipoServicio][i].mensaje.match(/\.(jpeg|jpg|gif|png)$/) != null) {
                            //ELIMINACION DE IMAGEN SI ES QUE SE ENCUENTRA UNA
                            let path = join(process.cwd(), obj[tipoServicio][i].mensaje)
                            require$$1.unlink(path, (err) => {
                                if (err) {
                                    console.error(err);
                                    return;
                                  }
                                console.log(`El archivo ${path} ha sido eliminado correctamente.`);
                            })
                        }
                        }

                       delete obj[tipoServicio][i];
                    }
                }

                //FUNCION QUE ELIMINA LOS NULL DEL ARCHIVO JSON
                const removeNullValues = (obj) => {
                    if (typeof obj !== 'object') {
                        return obj;
                    }

                    if (Array.isArray(obj)) {
                        return obj.filter((value) => value !== null).map(removeNullValues);
                    }

                    return Object.entries(obj)
                        .filter(([_, value]) => value !== null)
                        .reduce((acc, [key, value]) => {
                            acc[key] = removeNullValues(value);
                            return acc;
                        }, {});
                };

                const newData = removeNullValues(obj);

                require$$1.writeFile(datos, JSON.stringify(newData), err => {
                    if (err) throw err;
                    console.log(`Se eliminaron todos los mensajes de: ${tipoServicio}`)

                    if(isServicio === true) {
                        res.statusCode = 302;
                        let urlServicio = '/servicios/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    } else {
                        res.statusCode = 302;
                        let urlServicio = '/promociones/' + tipoServicio
                        res.setHeader('Location', urlServicio);
                        res.end();
                    }   
                })
            })
        })
        .post('/subirImagen', (req, res) => {
            const tipoServicio = req.query.tipoServicio
            const categoria = req.query.categoria;
            let isServicio = true;

            let datos
                if(categoria === "Servicios") {
                    datos = join(process.cwd(), '/resources/dataServicios.json')
                } else {
                    datos = join(process.cwd(), '/resources/dataPromociones.json')
                    isServicio = false;
                }

            let cat
                if(isServicio === true){
                    cat = 'servicios'
                } else {
                    cat = 'promociones'
                }

            const storage = multer.diskStorage({
                destination: function (req, file, cb) {
                    cb(null, `./resources/${cat}/imgs/` + tipoServicio);
                },
                //FUNCION QUE LE DA UN NOMBRE UNICO A CADA FOTO
                filename: function (req, file, cb) {
                    cb(null, Date.now() + require$$0.extname(file.originalname));
                }
            });

            const upload = multer({ storage: storage });

            upload.single('img')(req, res, function (err) {
                if (err instanceof multer.MulterError) {
                    console.log(err)
                } else if (err) {
                    console.log(err)
                } else {
                    // La imagen se subi칩 correctamente
                    console.log(`Se subi칩 la imagen ${req.file.filename} en la ruta: /resources/${cat}/imgs/${tipoServicio}`);
                    let msg = `/resources/${cat}/imgs/${tipoServicio}/${req.file.filename}`
                    // Guardado de datos
                    let data = readFileSync(datos)
                    let obj = JSON.parse(data)
                    obj[tipoServicio].push({ mensaje: msg })
                    require$$1.writeFileSync(datos, JSON.stringify(obj))
                }
            });



            if(isServicio === true) {
                res.statusCode = 302;
                let urlServicio = '/servicios/' + tipoServicio
                res.setHeader('Location', urlServicio);
                res.end();
            } else {
                res.statusCode = 302;
                let urlServicio = '/promociones/' + tipoServicio
                res.setHeader('Location', urlServicio);
                res.end();
            }   
        })
        .listen(port, () => banner());
};

var portal_http = start;

module.exports = portal_http;
