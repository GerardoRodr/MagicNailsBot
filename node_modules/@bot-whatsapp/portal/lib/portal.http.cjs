/** 
* NO TOCAR ESTE ARCHIVO: Es generado automaticamente, si sabes lo que haces adelante ;)
* de lo contrario mejor ir a la documentacion o al servidor de discord link.codigoencasa.com/DISCORD
*/
'use strict';

var require$$0 = require('path');
var require$$1 = require('fs');
var require$$2 = require('kleur');
var require$$3 = require('polka');
var require$$4 = require('serve-static');
const { cwd } = require('process');
const send = require('send');
const bodyParser = require('body-parser');

const { join } = require$$0;
const { createReadStream, existsSync, readFile, readFileSync } = require$$1;
const { bgYellow, cyan, yellow } = require$$2;
const polka = require$$3;

const HTTP_PORT = process.env.PORT || 3000;
const QR_FILE = process.env.QR_FILE ?? 'bot';
const PUBLIC_URL = process.env.PUBLIC_URL ?? process.env.RAILWAY_STATIC_URL ?? 'http://localhost';

const dir = [join(__dirname, 'dist'), join(__dirname, '..', 'dist')].find((i) => existsSync(i));
const serve = require$$4(dir);

/**
 * Iniciamos Portal WEB para escanear QR
 * @param {port:3000, publicSite:'http://mistio.com', qrFile:'qr.png', dir:__dirname}
 */
const start = (args) => {
    const injectArgs = {
        port: HTTP_PORT,
        publicSite: PUBLIC_URL,
        name: QR_FILE,
        ...args,
    };
    const { port, publicSite, name } = injectArgs;

    const banner = () => {
        console.log(``);
        console.log(bgYellow(`游뛀 ESCANEAR QR 游뛀`));
        console.log(cyan(`- Para escanear el qr de conexion visita `), yellow(`${publicSite}:${port}`));
        console.log(cyan(`- Se ha creado un archivo que finaliza `), yellow('qr.png'));
        console.log(``);
    };

    const datosServicios = join(process.cwd(), '/resources/servicios/dataServicios.json')

    polka()
        .use(serve)
        .use(bodyParser.urlencoded({ extended: true }))
        .get('/resources/*', (req, res) => {
          const fileName = req.url.replace('/resources/', '');
          const filePath = join(process.cwd(), 'resources', fileName);
          send(req, filePath).pipe(res);
        })
        .get('qr.png', (_, res) => {
            const qrSource = [
                join(process.cwd(), `${name}.qr.png`),
                join(__dirname, '..', `${name}.qr.png`),
                join(__dirname, `${name}.qr.png`),
            ].find((i) => existsSync(i));

            const qrMark = [
                join(__dirname, 'dist', 'water-mark.png'),
                join(__dirname, '..', 'dist', 'water-mark.png'),
            ].find((i) => existsSync(i));
            const fileStream = createReadStream(qrSource ?? qrMark);

            res.writeHead(200, { 'Content-Type': 'image/png' });
            fileStream.pipe(res);
        })
        //NUEVA PAGINA QUE SE GENERARA EN EL MISMO PUERTO
        .get('/promociones/laceado', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/promociones/promoLaceado.html');
            fileStream.pipe(res);
        })
        .get('/servicios/laceado', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/servicioLaceado.html');
            fileStream.pipe(res);
        })
        .get('/servicios/editarMensaje', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/editMsgServ.html');
            fileStream.pipe(res);
        })
        .get('/servicios/nuevoMensajeTexto', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/newMsgTxtServ.html');
            fileStream.pipe(res);
        })
        .get('/servicios/nuevoMensajeImagen', (_, res) => {
            // Manejar la solicitud para la p치gina principal
            res.setHeader('Content-Type', 'text/html');
            const fileStream = createReadStream('./resources/servicios/newMsgImgServ.html');
            fileStream.pipe(res);
        })
        .post('/nuevoMensaje', (req, res) => {
            const msg = req.body.msg; // Obtenemos el valor del campo "msg" del formulario
            const tipoServicio = req.body.tipoServicio;
            console.log(msg);// Imprimimos el valor del campo "msg"
            // Guardado de datos
            let data = readFileSync(datosServicios)
            let obj = JSON.parse(data)
            obj.Laceado.push({mensaje: msg})
            require$$1.writeFileSync(datosServicios, JSON.stringify(obj))
            res.statusCode = 302;
            res.setHeader('Location', '/servicios/laceado');
            res.end();
        })
        .post('/servicios/editar/', (req, res) => {
            const { texto, i } = req.body; // Obtener el campo y valor del cuerpo de la solicitud

            readFile(datosServicios, 'utf-8', (err, data) => {
                if(err) {
                    console.error(err);
                    res.end('Error al leer el archivo JSON')
                    return
                }

                const jsonData = JSON.parse(data);

                if (jsonData.Laceado[i]) {
                    jsonData.Laceado[i].texto = texto;
                } else {
                    res.end(`El 칤ndice ${i} est치 fuera de rango`);
                    return;
                }

                // Escribir el archivo JSON modificado
                fs.writeFile(datosServicios, JSON.stringify(jsonData), (err) => {
                    if (err) {
                        console.error(err);
                        res.end('Error al escribir en el archivo JSON');
                        return;
                    }
                    // Enviar respuesta de 칠xito
                    res.end(`Texto del primer objeto "Laceado" modificado a "${texto}"`);
                })
            })                    
        })
        .listen(port, () => banner());
};

var portal_http = start;

module.exports = portal_http;
